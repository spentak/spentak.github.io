{
  "1": {
    "id": "1",
    "title": "C++ component won't show in Blueprints",
    "content": "Unreal Engine Components Not Showing In Blueprint So this seems really simple when I write it out, but I lost two hours of my life to this. Basically, I was duplicating Blueprints on a health bar UWidgetComponent and I knew I needed to move the logic into C++ for code reduction. I wrote the code, and even got the health bar widget working in the game. The problem was, inside of the Blueprint Editor, my UWidgetComponent was nowhere to be found and I couldn’t edit it. I thought I was going crazy. The problem was I had the widget code inside of BeginPlay instead of the constructor. Don’t do this void AGameCharacter::BeginPlay() { HealthBarWidget = CreateDefaultSubobject&lt;UWidgetComponent&gt;(this, TEXT(&quot;HealthBarWidget&quot;)); HealthBarWidget-&gt;SetupAttachment(RootComponent); } Instead do this AGameCharacter::AGameCharacter() { HealthBarWidget = CreateDefaultSubobject&lt;UWidgetComponent&gt;(this, TEXT(&quot;HealthBarWidget&quot;)); HealthBarWidget-&gt;SetupAttachment(RootComponent); } Please enable JavaScript to view the comments powered by Disqus.",
    "url": "http://localhost:4000/docs/cpp/cpp-component-wont-load/",
    "relUrl": "/docs/cpp/cpp-component-wont-load/"
  },
  "2": {
    "id": "2",
    "title": "C++",
    "content": "",
    "url": "http://localhost:4000/docs/c++",
    "relUrl": "/docs/c++"
  },
  "3": {
    "id": "3",
    "title": "Home",
    "content": "Unreal Engine Tutorials &amp; Code Snippets This blog is focused on simply helping people overcome obstacles with UE4 C++ and UE4 Blueprints. It covers common problems and issues that you might encounter as you create your own Unreal Engine Games. I hope it helps! Unreal Engine 4 Course If you would like a more formal training course, I have one available online with Udemy. Unreal Training About the project This website is © 2017-2019 by Mark Wahlbeck. Code of conduct Feel free to use and share any content you find useful on this site!",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "4": {
    "id": "4",
    "title": "Sharing C++ Code Between Classes",
    "content": "How To Share C++ Code Among Unrelated Unreal Engine Classes I use Blueprint as much as I can. When I need to re-use code or need inheritance, that is when I move things to C++. It’s just better than working with parent/child blueprints. I recently ran into the issue where I had two different classes that needed shared functionality but were un-related. I had a Character object that could be damaged and attack other objects. I also had a non-skeletal mesh actor (A tower defense tower) that also needed those exact same properties and functions. What I Needed TowerActor EnemyCharacter onHit() onHit() int32 health int32 health onHpZero() onHpZero() int32 atkDmg int32 atkDmg I had about 20 properties, functions, and events I needed shared across my Actor and Character. The problem was I couldn’t modify Unreal’s ACharacter class to point to a custom APawn subclass where I might implement that shared functionality. I had to choose to copy and paste the code (bugs) or to hack something together. So what did I do? I hacked my tower and made it a skeletal mesh, which meant they could both use that code without me having to write it twice. This had many issues, including some collision properties and other hacks I had to do to use it properly. It was really bugging me. Normally, in other languages I would use an Interface or Protocol to solve this problem. C++ doesn’t have the concept of Interfaces. Unreal UINTERFACE Then I found out about UINTERFACE. They got me really close to a model more similar to dependency injection. But they still had the issue of not being able to support properties - ie no variables. Local UE4 Answers contributor Rama mentioned a way of getting properties with UINTERFACE using virtual getter functions. This was cool, but still felt a little hackery. And I ran into some issues. But at the end of the day I don’t like using things as they weren’t intended. Unreal Multiple Inheritance The other option I wanted to try was multiple inheritance. I’m not a fan of it but it could have worked. I came to find out that Unreal Engine does not support multiple inheritance. So there was no way I could create a custom Character that inherits from ACharacter as well as my base actor object. The Solution: UActorComponent Finally I found the right solution. That is to use UActorComponent. UActorComponent is a great way to achieve clean composition in Unreal design. From the Unreal docs: Actor Components (class UActorComponent) are most useful for abstract behaviors such as movement, inventory or attribute management, and other non-physical concepts. Actor Components do not have a transform, meaning they do not have any physical location or rotation in the world. Easy Steps Created a HealthComponent Created a AttackComponent Add these components to any UObject In Blueprint, grab components and call functions or set values Just add the components AGameCharacter::AGameCharacter() { healthComponent = CreateDefaultSubobject&lt;UHealthComponent&gt;(this, TEXT(&quot;HealthComponent&quot;)); healthComponent-&gt;SetupAttachment(RootComponent); attackComponent = CreateDefaultSuboject&lt;UAttackComponent&gt;(this, TEXT(&quot;AttackComponent&quot;)); attackComponent-&gt;SetupAttachment(RootComponent); } {% include disqus.html %}",
    "url": "http://localhost:4000/docs/cpp/sharing-code-between-classes/",
    "relUrl": "/docs/cpp/sharing-code-between-classes/"
  }
  
}
